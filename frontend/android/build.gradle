import dependencies.Dep
import dependencies.Versions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'io.fabric'
apply plugin: 'com.akaita.android.easylauncher'

android {
    compileSdkVersion Versions.androidCompileSdkVersion
    signingConfigs {
        debug {
            keyAlias 'droidkaigi_debug'
            keyPassword 'droidkaigi'
            storeFile file('debug.keystore')
            storePassword 'droidkaigi'
        }
        release.initWith(debug)

        if (isProductionBuild) {
            release {
                keyAlias System.getenv("RELEASE_KEY_ALIAS")
                keyPassword System.getenv("RELEASE_KEY_PASSWORD")
                storeFile System.getenv("RELEASE_STORE_FILE")
                storePassword System.getenv("RELEASE_PASSWORD")
            }
        }
    }
    defaultConfig {
        applicationId "io.github.droidkaigi.confsched2019"
        minSdkVersion Versions.androidMinSdkVersion
        targetSdkVersion 28
        versionCode Versions.androidVersionCode
        versionName Versions.androidVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resConfigs "ja"
        // For Android Studio Gradle sync
        applicationIdSuffix ".debug"
        manifestPlaceholders = [isCi: String.valueOf(isCi)]
    }
    buildTypes {
        debug {
            zipAlignEnabled true
        }
        release {
            zipAlignEnabled true
            useProguard true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (isProductionBuild) {
                applicationIdSuffix ""
                proguardFiles 'proguard-rules-production.pro'
            }
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        lintConfig file("${project.projectDir}/lint.xml")

        xmlReport isCi
        htmlReport !isCi

        xmlOutput file("lint-results.xml")
        htmlOutput file("lint-results.html")
    }
    packagingOptions {
        exclude 'META-INF/ktor-http.kotlin_module'
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/ktor-utils.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-io.kotlin_module'
        exclude 'META-INF/ktor-client-core.kotlin_module'
    }
}

dependencies {
    implementation project(":model")
    implementation project(":feature:session")
    implementation project(":feature:about")
    implementation project(":feature:announcement")
    implementation project(":feature:floormap")
    implementation project(":feature:sponsor")
    implementation project(":feature:settings")
    implementation project(":feature:staff")
    implementation project(':feature:user')
    implementation project(':feature:survey')
    implementation project(':feature:system')
    implementation project(':feature:notification')
    implementation project(':frontendcomponent:androidcomponent')
    implementation project(':data:db-room')
    implementation project(':data:repository-impl')
    implementation project(':data:firestore-impl')
    implementation project(':data:api-impl')
    implementation project(':ext:log')

    implementation Dep.Kotlin.stdlibJvm
    api Dep.Kotlin.coroutines
    implementation Dep.Kotlin.androidCoroutinesDispatcher
    implementation Dep.OkHttp.okio

    implementation Dep.Firebase.fireStore

    implementation Dep.AndroidX.appCompat
    implementation Dep.AndroidX.constraint

    implementation Dep.AndroidX.Navigation.runtime
    implementation Dep.AndroidX.Navigation.fragment
    implementation Dep.AndroidX.Navigation.ui
    implementation Dep.AndroidX.Navigation.runtimeKtx
    implementation Dep.AndroidX.Navigation.fragmentKtx

    implementation Dep.AndroidX.coreKtx

    implementation Dep.Stetho.stetho

    releaseImplementation Dep.LeakCanary.leakCanary
    debugImplementation Dep.LeakCanary.leakCanary
    debugImplementation Dep.LeakCanary.leakCanaryFragment

    implementation Dep.Firebase.core
    implementation Dep.Firebase.auth
    implementation Dep.Firebase.crashlytics

    api Dep.Dagger.core
    api Dep.Dagger.androidSupport
    api Dep.Dagger.android
    kapt Dep.Dagger.compiler
    kapt Dep.Dagger.androidProcessor
    compileOnly Dep.Dagger.assistedInjectAnnotations
    kapt Dep.Dagger.assistedInjectProcessor

    implementation Dep.Timber.android

    testImplementation Dep.Test.junit

    androidTestImplementation Dep.Test.testRunner
    androidTestImplementation Dep.Test.espressoCore

    Dep.Hyperion.hyperionPlugins.forEach {
        debugImplementation it
    }
}


apply plugin: 'com.google.gms.google-services'
